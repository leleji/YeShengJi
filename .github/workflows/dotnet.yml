name: .NET and Docker

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-push:
    runs-on: windows-latest # 需要使用 Windows 环境来运行 PowerShell 脚本

    steps:
    # 检出代码
    - uses: actions/checkout@v4

    # 设置 .NET 环境
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # 恢复依赖
    - name: Restore dependencies
      run: dotnet restore

    # 构建应用程序
    - name: Build
      run: dotnet build --no-restore --configuration Release

    # 发布应用程序
    - name: Publish Application
      run: dotnet publish -c Release -o publish

    # 确定版本号
    - name: Get Version
      id: version
      shell: pwsh
      run: |
        $dllPath = "./publish/AdminWeb.dll"
        if (Test-Path $dllPath) {
          $versionInfo = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($dllPath)
          $version = $versionInfo.FileVersion
          Write-Host "Version: $version"
          echo "version=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
        } else {
          Write-Error "AdminWeb.dll not found at $dllPath" 
          exit 1

    # 登录 Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 构建 Docker 镜像
    - name: Build Docker Image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/myapi:${{ env.version }} .

    # 推送 Docker 镜像到 Docker Hub
    - name: Push Docker Image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/myapi:${{ env.version }}

    # 推送最新版本的镜像标签
    - name: Tag and Push Latest Image
      run: |
        docker tag ${{ secrets.DOCKER_USERNAME }}/myapi:${{ env.version }} ${{ secrets.DOCKER_USERNAME }}/myapi:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/myapi:latest
